//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Andy/Source/Antlr/AntlrTest/ExprLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrTest {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AND=1, OR=2, NOT=3, EQ=4, COMMA=5, SEMI=6, LPAREN=7, RPAREN=8, LCURLY=9, 
		RCURLY=10, INT=11, ID=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"AND", "OR", "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", 
		"RCURLY", "INT", "ID", "WS"
	};


	public ExprLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExprLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'and'", "'or'", "'not'", "'='", "','", "';'", "'('", "')'", "'{'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AND", "OR", "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", 
		"RCURLY", "INT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExprLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExprLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,71,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,1,0,
		1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,4,10,54,8,10,11,10,12,10,55,1,11,1,11,5,11,60,8,11,
		10,11,12,11,63,9,11,1,12,4,12,66,8,12,11,12,12,12,67,1,12,1,12,0,0,13,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,1,0,4,
		1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,
		12,13,32,32,73,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
		0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
		21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,31,1,0,0,0,5,34,1,
		0,0,0,7,38,1,0,0,0,9,40,1,0,0,0,11,42,1,0,0,0,13,44,1,0,0,0,15,46,1,0,
		0,0,17,48,1,0,0,0,19,50,1,0,0,0,21,53,1,0,0,0,23,57,1,0,0,0,25,65,1,0,
		0,0,27,28,5,97,0,0,28,29,5,110,0,0,29,30,5,100,0,0,30,2,1,0,0,0,31,32,
		5,111,0,0,32,33,5,114,0,0,33,4,1,0,0,0,34,35,5,110,0,0,35,36,5,111,0,0,
		36,37,5,116,0,0,37,6,1,0,0,0,38,39,5,61,0,0,39,8,1,0,0,0,40,41,5,44,0,
		0,41,10,1,0,0,0,42,43,5,59,0,0,43,12,1,0,0,0,44,45,5,40,0,0,45,14,1,0,
		0,0,46,47,5,41,0,0,47,16,1,0,0,0,48,49,5,123,0,0,49,18,1,0,0,0,50,51,5,
		125,0,0,51,20,1,0,0,0,52,54,7,0,0,0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,
		1,0,0,0,55,56,1,0,0,0,56,22,1,0,0,0,57,61,7,1,0,0,58,60,7,2,0,0,59,58,
		1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,24,1,0,0,0,63,61,
		1,0,0,0,64,66,7,3,0,0,65,64,1,0,0,0,66,67,1,0,0,0,67,65,1,0,0,0,67,68,
		1,0,0,0,68,69,1,0,0,0,69,70,6,12,0,0,70,26,1,0,0,0,4,0,55,61,67,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrTest
