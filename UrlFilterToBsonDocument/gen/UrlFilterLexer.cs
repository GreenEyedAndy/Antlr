//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Source/Antlr/UrlFilterToBsonDocument/UrlFilter.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UrlFilterLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, OP=3, LOGOP=4, BOOLEAN=5, IDENTIFIER=6, STRING=7, DATETIME=8, 
		NUMBER=9, WS=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "OP", "LOGOP", "BOOLEAN", "IDENTIFIER", "STRING", "DATETIME", 
		"NUMBER", "INT", "DIGIT", "WS"
	};


	public UrlFilterLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public UrlFilterLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "OP", "LOGOP", "BOOLEAN", "IDENTIFIER", "STRING", "DATETIME", 
		"NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UrlFilter.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UrlFilterLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,10,122,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,1,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,45,8,2,1,3,1,3,
		1,3,1,3,1,3,3,3,52,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,63,8,4,
		1,5,1,5,4,5,67,8,5,11,5,12,5,68,1,6,1,6,5,6,73,8,6,10,6,12,6,76,9,6,1,
		6,1,6,1,7,4,7,81,8,7,11,7,12,7,82,1,7,1,7,5,7,87,8,7,10,7,12,7,90,9,7,
		1,8,3,8,93,8,8,1,8,1,8,1,8,4,8,98,8,8,11,8,12,8,99,3,8,102,8,8,1,9,1,9,
		1,9,5,9,107,8,9,10,9,12,9,110,9,9,3,9,112,8,9,1,10,1,10,1,11,4,11,117,
		8,11,11,11,12,11,118,1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,0,21,0,23,10,1,0,6,3,0,65,90,95,95,97,122,3,0,10,10,13,13,34,
		34,1,0,48,57,5,0,43,43,45,46,48,58,84,84,90,90,1,0,49,57,3,0,9,10,13,13,
		32,32,136,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,23,1,0,0,0,1,25,
		1,0,0,0,3,27,1,0,0,0,5,44,1,0,0,0,7,51,1,0,0,0,9,62,1,0,0,0,11,64,1,0,
		0,0,13,70,1,0,0,0,15,80,1,0,0,0,17,92,1,0,0,0,19,111,1,0,0,0,21,113,1,
		0,0,0,23,116,1,0,0,0,25,26,5,40,0,0,26,2,1,0,0,0,27,28,5,41,0,0,28,4,1,
		0,0,0,29,30,5,101,0,0,30,45,5,113,0,0,31,32,5,110,0,0,32,33,5,101,0,0,
		33,45,5,113,0,0,34,35,5,103,0,0,35,45,5,116,0,0,36,37,5,103,0,0,37,38,
		5,116,0,0,38,45,5,101,0,0,39,40,5,108,0,0,40,45,5,116,0,0,41,42,5,108,
		0,0,42,43,5,116,0,0,43,45,5,101,0,0,44,29,1,0,0,0,44,31,1,0,0,0,44,34,
		1,0,0,0,44,36,1,0,0,0,44,39,1,0,0,0,44,41,1,0,0,0,45,6,1,0,0,0,46,47,5,
		97,0,0,47,48,5,110,0,0,48,52,5,100,0,0,49,50,5,111,0,0,50,52,5,114,0,0,
		51,46,1,0,0,0,51,49,1,0,0,0,52,8,1,0,0,0,53,54,5,116,0,0,54,55,5,114,0,
		0,55,56,5,117,0,0,56,63,5,101,0,0,57,58,5,102,0,0,58,59,5,97,0,0,59,60,
		5,108,0,0,60,61,5,115,0,0,61,63,5,101,0,0,62,53,1,0,0,0,62,57,1,0,0,0,
		63,10,1,0,0,0,64,66,7,0,0,0,65,67,7,0,0,0,66,65,1,0,0,0,67,68,1,0,0,0,
		68,66,1,0,0,0,68,69,1,0,0,0,69,12,1,0,0,0,70,74,5,34,0,0,71,73,8,1,0,0,
		72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,
		76,74,1,0,0,0,77,78,5,34,0,0,78,14,1,0,0,0,79,81,7,2,0,0,80,79,1,0,0,0,
		81,82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,84,1,0,0,0,84,88,5,45,0,0,
		85,87,7,3,0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,
		89,16,1,0,0,0,90,88,1,0,0,0,91,93,5,45,0,0,92,91,1,0,0,0,92,93,1,0,0,0,
		93,94,1,0,0,0,94,101,3,19,9,0,95,97,5,46,0,0,96,98,7,2,0,0,97,96,1,0,0,
		0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,95,1,
		0,0,0,101,102,1,0,0,0,102,18,1,0,0,0,103,112,5,48,0,0,104,108,7,4,0,0,
		105,107,7,2,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,
		1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,111,103,1,0,0,0,111,104,1,0,0,
		0,112,20,1,0,0,0,113,114,7,2,0,0,114,22,1,0,0,0,115,117,7,5,0,0,116,115,
		1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,
		0,120,121,6,11,0,0,121,24,1,0,0,0,14,0,44,51,62,68,74,82,88,92,99,101,
		108,111,118,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
